-- Correct New dppo looks like counts are correct and monthly data - this is cumulative but it works fine KPI 1,2,3
WITH Date_Range AS (
    SELECT 
        MIN(SAFE_CAST(`Request approved at` AS DATE)) AS Min_Date,
        MAX(SAFE_CAST(`Request approved at` AS DATE)) AS Max_Date
    FROM 
        `rdmga4.RDMreports.raw_organization_overview`
),

Product_Details AS (
    SELECT 
        `Product Series Code`,
        COALESCE(`Data Product Name`, 'Unnamed Product') AS Data_Product_Name,
        SAFE_CAST(`Published Date` AS DATE) AS Published_Date,
        `Version Number`,
        `State`
    FROM 
        `rdmga4.RDMreports.raw_data_product_details`
    WHERE 
        `State` IN ('active', 'expired')
),

Contract_Details AS (
    SELECT 
        `Product Series Code`,
        SAFE_CAST(`Sunsetting Date` AS DATE) AS Sunsetting_Date,
        CAST(`Seller BPID` AS STRING) AS Seller_BPID,
        CAST(`Buyer BPID` AS STRING) AS Buyer_BPID
    FROM 
        `rdmga4.RDMreports.contracts`
),

Organization_Details AS (
    SELECT 
        CAST(`BPID` AS STRING) AS BPID,
        `Organization Name`,
        SAFE_CAST(`Request approved at` AS DATE) AS Consumer_Approval_Date,
        `Status` AS Approval_Status
    FROM 
        `rdmga4.RDMreports.raw_organization_overview`
    WHERE 
        `Request approved at` IS NOT NULL
),

Consumer_To_Publisher AS (
    SELECT 
        CAST(`BPID` AS STRING) AS BPID,
        `Organization Name`,
        SAFE_CAST(`Upgrade request approval date` AS DATE) AS Publisher_Approval_Date,
        `Upgrade Status`
    FROM 
        `rdmga4.RDMreports.consumer_to_publisher`
    WHERE 
        `Upgrade request approval date` IS NOT NULL
),

Combined_Product_Data AS (
    SELECT DISTINCT
        pd.`Product Series Code`,
        pd.Data_Product_Name,
        pd.Published_Date,
        pd.`Version Number`,
        cd.Sunsetting_Date,
        pub_org.`Organization Name` AS Publisher_Organization_Name,
        cons_org.`Organization Name` AS Consumer_Organization_Name,
        pd.State
    FROM 
        Product_Details pd
    LEFT JOIN 
        Contract_Details cd
    ON 
        pd.`Product Series Code` = cd.`Product Series Code`
    LEFT JOIN 
        Organization_Details pub_org
    ON 
        cd.Seller_BPID = pub_org.BPID
    LEFT JOIN 
        Organization_Details cons_org
    ON 
        cd.Buyer_BPID = cons_org.BPID
),

Active_Periods AS (
    SELECT 
        `Product Series Code`,
        Data_Product_Name,
        Publisher_Organization_Name,
        Consumer_Organization_Name,
        COALESCE(Published_Date, DATE('2023-01-01')) AS Start_Date,
        CASE 
            WHEN State = 'expired' THEN Sunsetting_Date
            ELSE DATE_TRUNC(CURRENT_DATE(), MONTH)
        END AS End_Date
    FROM 
        Combined_Product_Data
    WHERE 
        Sunsetting_Date IS NULL OR Sunsetting_Date >= DATE('2023-01-01')
),

Expanded_Active_Periods AS (
    SELECT 
        `Product Series Code`,
        Data_Product_Name,
        Publisher_Organization_Name,
        Consumer_Organization_Name,
        ACTIVE_MONTH AS Active_Month
    FROM 
        Active_Periods,
        UNNEST(
            GENERATE_DATE_ARRAY(
                DATE_TRUNC(Start_Date, MONTH),
                LEAST(DATE_TRUNC(End_Date, MONTH), DATE_TRUNC(CURRENT_DATE(), MONTH)),
                INTERVAL 1 MONTH
            )
        ) AS ACTIVE_MONTH
),

Monthly_Stats AS (
    SELECT 
        eap.Active_Month,
        COUNT(DISTINCT eap.Publisher_Organization_Name) AS Distinct_Publisher_Count,
        COUNT(DISTINCT eap.Consumer_Organization_Name) AS Distinct_Consumer_Count,
        COUNT(DISTINCT eap.`Product Series Code`) AS Products_Active_Count
    FROM 
        Expanded_Active_Periods eap
    GROUP BY 
        eap.Active_Month
),

Monthly_Approval_Counts AS (
    SELECT 
        Month,
        COUNT(DISTINCT CASE WHEN Consumer_Approval_Date <= Month THEN od.BPID END) AS Approved_Consumers,
        COUNT(DISTINCT CASE WHEN Publisher_Approval_Date <= Month THEN ctp.BPID END) AS Approved_Publishers
    FROM (
        SELECT 
            GENERATE_DATE_ARRAY(
                (SELECT Min_Date FROM Date_Range), 
                (SELECT DATE_ADD(Max_Date, INTERVAL 1 MONTH) FROM Date_Range)
            ) AS Month
    ), UNNEST(Month) AS Month
    LEFT JOIN Organization_Details od ON od.Consumer_Approval_Date IS NOT NULL
    LEFT JOIN Consumer_To_Publisher ctp ON ctp.Publisher_Approval_Date IS NOT NULL
    GROUP BY 
        Month
),

Comprehensive_Counts AS (
    SELECT
        COUNT(DISTINCT cpd.Publisher_Organization_Name) AS Publishers_In_Contracts,
        COUNT(DISTINCT pd.`Product Series Code`) AS Unique_Products
    FROM 
        Organization_Details od
    LEFT JOIN 
        Combined_Product_Data cpd
    ON 
        od.BPID = cpd.Publisher_Organization_Name
    LEFT JOIN 
        Product_Details pd
    ON 
        pd.`Product Series Code` = cpd.`Product Series Code`
)

SELECT 
    DATE_TRUNC(ms.Active_Month, MONTH) AS Month,
    ms.Distinct_Publisher_Count,
    ms.Distinct_Consumer_Count,
    ms.Products_Active_Count,
    COALESCE(mac.Approved_Consumers, 0) AS Approved_Consumers,
    cc.Publishers_In_Contracts,
    COALESCE(mac.Approved_Publishers, 0) AS Approved_Publishers,
    cc.Unique_Products
FROM 
    Monthly_Stats ms
CROSS JOIN 
    Comprehensive_Counts cc
LEFT JOIN 
    Monthly_Approval_Counts mac ON DATE_TRUNC(ms.Active_Month, MONTH) = mac.Month
ORDER BY 
    Month;




----------------------------------------------------------------------------

Has correct counts

WITH Product_Details AS (
    SELECT 
        `Product Series Code`,
        COALESCE(`Data Product Name`, 'Unnamed Product') AS Data_Product_Name,
        SAFE_CAST(`Published Date` AS DATE) AS Published_Date,
        `Version Number`,
        `State`
    FROM 
        `rdmga4.RDMreports.raw_data_product_details`
    WHERE 
        `State` IN ('active', 'expired')
),

Contract_Details AS (
    SELECT 
        `Product Series Code`,
        SAFE_CAST(`Sunsetting Date` AS DATE) AS Sunsetting_Date,
        CAST(`Seller BPID` AS STRING) AS Seller_BPID,
        CAST(`Buyer BPID` AS STRING) AS Buyer_BPID
    FROM 
        `rdmga4.RDMreports.contracts`
    WHERE 
        -- Only include relevant contracts
        SAFE_CAST(`Sunsetting Date` AS DATE) >= DATE('2023-01-01')
        OR `Sunsetting Date` IS NULL
),

Organization_Details AS (
    SELECT 
        CAST(`BPID` AS STRING) AS BPID,
        `Organization Name`,
        SAFE_CAST(`Request approved at` AS DATE) AS Consumer_Approval_Date
    FROM 
        `rdmga4.RDMreports.raw_organization_overview`
    WHERE 
        `Request approved at` IS NOT NULL
),

Active_Products AS (
    SELECT 
        pd.`Product Series Code`,
        pd.Data_Product_Name,
        pd.Published_Date,
        cd.Sunsetting_Date,
        pub_org.`Organization Name` AS Publisher_Organization_Name,
        cons_org.`Organization Name` AS Consumer_Organization_Name,
        pd.State,
        -- Check if product is active for current viewing date
        CASE
            WHEN pd.State = 'expired' AND cd.Sunsetting_Date <= CURRENT_DATE() THEN FALSE
            WHEN pd.Published_Date > CURRENT_DATE() THEN FALSE
            WHEN pd.State = 'active' OR cd.Sunsetting_Date > CURRENT_DATE() THEN TRUE
            ELSE FALSE
        END AS Is_Active_Today,
        -- Get exact activation and expiration dates
        GREATEST(pd.Published_Date, DATE('2023-01-01')) AS Activation_Date,
        cd.Sunsetting_Date AS Expiration_Date
    FROM 
        Product_Details pd
    LEFT JOIN 
        Contract_Details cd ON pd.`Product Series Code` = cd.`Product Series Code`
    LEFT JOIN 
        Organization_Details pub_org ON cd.Seller_BPID = pub_org.BPID
    LEFT JOIN 
        Organization_Details cons_org ON cd.Buyer_BPID = cons_org.BPID
    WHERE 
        pd.Published_Date <= CURRENT_DATE()
),

Date_Spine AS (
    SELECT date
    FROM UNNEST(GENERATE_DATE_ARRAY(
        DATE('2023-01-01'),
        CURRENT_DATE(),
        INTERVAL 1 DAY
    )) AS date
),

Daily_Product_Status AS (
    SELECT
        ds.date AS Status_Date,
        ap.`Product Series Code`,
        ap.Publisher_Organization_Name,
        ap.Consumer_Organization_Name,
        -- Check if product is active on specific date
        CASE
            WHEN ap.Activation_Date <= ds.date 
                 AND (ap.Expiration_Date IS NULL OR ap.Expiration_Date > ds.date)
                 AND (ap.State = 'active' OR ds.date < ap.Expiration_Date)
            THEN TRUE
            ELSE FALSE
        END AS Is_Active_On_Date
    FROM 
        Date_Spine ds
    CROSS JOIN 
        Active_Products ap
),

Daily_Counts AS (
    SELECT 
        Status_Date,
        COUNT(DISTINCT CASE WHEN Is_Active_On_Date THEN Publisher_Organization_Name END) AS Distinct_Publisher_Count,
        COUNT(DISTINCT CASE WHEN Is_Active_On_Date THEN Consumer_Organization_Name END) AS Distinct_Consumer_Count,
        COUNT(DISTINCT CASE WHEN Is_Active_On_Date THEN `Product Series Code` END) AS Products_Active_Count
    FROM 
        Daily_Product_Status
    GROUP BY 
        Status_Date
),

Approval_Status AS (
    SELECT 
        ds.date AS Status_Date,
        COUNT(DISTINCT CASE WHEN od.Consumer_Approval_Date <= ds.date THEN od.BPID END) AS Approved_Consumers,
        COUNT(DISTINCT CASE WHEN ctp.`Upgrade request approval date` <= ds.date THEN ctp.BPID END) AS Approved_Publishers
    FROM 
        Date_Spine ds
    CROSS JOIN Organization_Details od
    LEFT JOIN `rdmga4.RDMreports.consumer_to_publisher` ctp 
        ON ctp.`Upgrade request approval date` IS NOT NULL
    GROUP BY 
        ds.date
)

SELECT 
    dc.Status_Date,
    dc.Distinct_Publisher_Count,
    dc.Distinct_Consumer_Count,
    dc.Products_Active_Count,
    COALESCE(aps.Approved_Consumers, 0) AS Approved_Consumers,
    dc.Distinct_Publisher_Count AS Publishers_In_Contracts,
    COALESCE(aps.Approved_Publishers, 0) AS Approved_Publishers,
    dc.Products_Active_Count AS Unique_Products
FROM 
    Daily_Counts dc
LEFT JOIN 
    Approval_Status aps ON dc.Status_Date = aps.Status_Date
ORDER BY 
    Status_Date;






----------------------------------------
commented

-- Extract product details with required columns and apply initial filters
WITH Product_Details AS (
    SELECT 
        `Product Series Code` AS dppo_Product_Series_Code, -- Unique code for each product series
        COALESCE(`Data Product Name`, 'Unnamed Product') AS dppo_Data_Product_Name, -- Default name if NULL
        SAFE_CAST(`Published Date` AS DATE) AS dppo_Published_Date, -- Convert published date to DATE type
        `Version Number` AS dppo_Version_Number, -- Version of the product
        `State` AS dppo_State -- State of the product (e.g., active or expired)
    FROM 
        `rdmga4.RDMreports.raw_data_product_details`
    WHERE 
        `State` IN ('active', 'expired') -- Include only active and expired products
),

-- Extract contract details with relevant fields and filter for valid contracts
Contract_Details AS (
    SELECT 
        `Product Series Code` AS dppo_Product_Series_Code, -- Product series linked to the contract
        SAFE_CAST(`Sunsetting Date` AS DATE) AS dppo_Sunsetting_Date, -- Date when the product is no longer available
        CAST(`Seller BPID` AS STRING) AS dppo_Seller_BPID, -- Seller ID (linked to organization)
        CAST(`Buyer BPID` AS STRING) AS dppo_Buyer_BPID -- Buyer ID (linked to organization)
    FROM 
        `rdmga4.RDMreports.contracts`
    WHERE 
        SAFE_CAST(`Sunsetting Date` AS DATE) >= DATE('2023-01-01') -- Include contracts valid from 2023 onward
        OR `Sunsetting Date` IS NULL -- Include contracts with no end date
),

-- Extract organization details with relevant fields and filter for approved requests
Organization_Details AS (
    SELECT 
        CAST(`BPID` AS STRING) AS dppo_BPID, -- Unique identifier for the organization
        `Organization Name` AS dppo_Organization_Name, -- Organization's name
        SAFE_CAST(`Request approved at` AS DATE) AS dppo_Consumer_Approval_Date -- Approval date of the consumer
    FROM 
        `rdmga4.RDMreports.raw_organization_overview`
    WHERE 
        `Request approved at` IS NOT NULL -- Include only approved organizations
),

-- Combine product, contract, and organization details to create a unified dataset for active products
Active_Products AS (
    SELECT 
        pd.dppo_Product_Series_Code, -- Product series code
        pd.dppo_Data_Product_Name, -- Product name
        pd.dppo_Published_Date, -- Published date
        cd.dppo_Sunsetting_Date, -- Sunsetting date
        pub_org.dppo_Organization_Name AS dppo_Publisher_Organization_Name, -- Publisher organization
        cons_org.dppo_Organization_Name AS dppo_Consumer_Organization_Name, -- Consumer organization
        pd.dppo_State, -- State of the product
        -- Determine if the product is active today
        CASE
            WHEN pd.dppo_State = 'expired' AND cd.dppo_Sunsetting_Date <= CURRENT_DATE() THEN FALSE
            WHEN pd.dppo_Published_Date > CURRENT_DATE() THEN FALSE
            WHEN pd.dppo_State = 'active' OR cd.dppo_Sunsetting_Date > CURRENT_DATE() THEN TRUE
            ELSE FALSE
        END AS dppo_Is_Active_Today,
        -- Determine activation and expiration dates
        GREATEST(pd.dppo_Published_Date, DATE('2023-01-01')) AS dppo_Activation_Date, -- Activation date
        cd.dppo_Sunsetting_Date AS dppo_Expiration_Date -- Expiration date
    FROM 
        Product_Details pd
    LEFT JOIN 
        Contract_Details cd ON pd.dppo_Product_Series_Code = cd.dppo_Product_Series_Code -- Join with contract details
    LEFT JOIN 
        Organization_Details pub_org ON cd.dppo_Seller_BPID = pub_org.dppo_BPID -- Join with publisher organization details
    LEFT JOIN 
        Organization_Details cons_org ON cd.dppo_Buyer_BPID = cons_org.dppo_BPID -- Join with consumer organization details
    WHERE 
        pd.dppo_Published_Date <= CURRENT_DATE() -- Include only products published before or on the current date
),

-- Create a date spine from January 1, 2023, to the current date for daily analysis
Date_Spine AS (
    SELECT date AS dppo_Date
    FROM UNNEST(GENERATE_DATE_ARRAY(
        DATE('2023-01-01'), -- Start date
        CURRENT_DATE(), -- End date
        INTERVAL 1 DAY -- Daily intervals
    )) AS date
),

-- Generate daily product status based on activation and expiration dates
Daily_Product_Status AS (
    SELECT
        ds.dppo_Date AS dppo_Status_Date, -- Specific date for analysis
        ap.dppo_Product_Series_Code, -- Product series code
        ap.dppo_Publisher_Organization_Name, -- Publisher organization
        ap.dppo_Consumer_Organization_Name, -- Consumer organization
        -- Determine if the product is active on a specific date
        CASE
            WHEN ap.dppo_Activation_Date <= ds.dppo_Date 
                 AND (ap.dppo_Expiration_Date IS NULL OR ap.dppo_Expiration_Date > ds.dppo_Date)
                 AND (ap.dppo_State = 'active' OR ds.dppo_Date < ap.dppo_Expiration_Date)
            THEN TRUE
            ELSE FALSE
        END AS dppo_Is_Active_On_Date
    FROM 
        Date_Spine ds
    CROSS JOIN 
        Active_Products ap -- Combine each date with all active products
),

-- Calculate daily counts of publishers, consumers, and active products
Daily_Counts AS (
    SELECT 
        dppo_Status_Date, -- Date for analysis
        COUNT(DISTINCT CASE WHEN dppo_Is_Active_On_Date THEN dppo_Publisher_Organization_Name END) AS dppo_Distinct_Publisher_Count, -- Count of distinct publishers
        COUNT(DISTINCT CASE WHEN dppo_Is_Active_On_Date THEN dppo_Consumer_Organization_Name END) AS dppo_Distinct_Consumer_Count, -- Count of distinct consumers
        COUNT(DISTINCT CASE WHEN dppo_Is_Active_On_Date THEN dppo_Product_Series_Code END) AS dppo_Products_Active_Count -- Count of active products
    FROM 
        Daily_Product_Status
    GROUP BY 
        dppo_Status_Date
),

-- Calculate approval status for consumers and publishers
Approval_Status AS (
    SELECT 
        ds.dppo_Date AS dppo_Status_Date, -- Specific date for approval status
        COUNT(DISTINCT CASE WHEN od.dppo_Consumer_Approval_Date <= ds.dppo_Date THEN od.dppo_BPID END) AS dppo_Approved_Consumers, -- Count of approved consumers
        COUNT(DISTINCT CASE WHEN ctp.`Upgrade request approval date` <= ds.dppo_Date THEN ctp.BPID END) AS dppo_Approved_Publishers -- Count of approved publishers
    FROM 
        Date_Spine ds
    CROSS JOIN Organization_Details od -- Combine each date with organization details
    LEFT JOIN `rdmga4.RDMreports.consumer_to_publisher` ctp 
        ON ctp.`Upgrade request approval date` IS NOT NULL -- Include only approved upgrades
    GROUP BY 
        ds.dppo_Date
)

-- Final result: Combine daily counts and approval status for reporting
SELECT 
    dc.dppo_Status_Date, -- Date of analysis
    dc.dppo_Distinct_Publisher_Count, -- Count of distinct publishers
    dc.dppo_Distinct_Consumer_Count, -- Count of distinct consumers
    dc.dppo_Products_Active_Count, -- Count of active products
    COALESCE(aps.dppo_Approved_Consumers, 0) AS dppo_Approved_Consumers, -- Approved consumers (default to 0 if NULL)
    dc.dppo_Distinct_Publisher_Count AS dppo_Publishers_In_Contracts, -- Publishers in contracts
    COALESCE(aps.dppo_Approved_Publishers, 0) AS dppo_Approved_Publishers, -- Approved publishers (default to 0 if NULL)
    dc.dppo_Products_Active_Count AS dppo_Unique_Products -- Unique products
FROM 
    Daily_Counts dc
LEFT JOIN 
    Approval_Status aps ON dc.dppo_Status_Date = aps.dppo_Status_Date -- Join approval status with daily counts
ORDER BY 
    dppo_Status_Date; -- Order results by date
