-- Generate a summary table for active and expired data connections with deduplication
WITH Months AS (
  -- Generate a list of months to evaluate
  SELECT 
    DATE_TRUNC(DATE_ADD(DATE('2023-01-01'), INTERVAL n MONTH), MONTH) AS Month_Start
  FROM 
    UNNEST(GENERATE_ARRAY(0, DATE_DIFF(CURRENT_DATE(), DATE('2023-01-01'), MONTH))) AS n
),
DeduplicatedContracts AS (
  -- Deduplicate contracts to ensure only one entry per Buyer BPID and Contract Series Code
  SELECT
    `Buyer BPID`,
    `Contract Series Code`,
    `Contract Start Date`,
    `Contract Expiry Date`,
    ROW_NUMBER() OVER (
      PARTITION BY `Buyer BPID`, `Contract Series Code`
      ORDER BY `Contract Start Date` ASC
    ) AS RowNum
  FROM
    rdmga4.RDMreports.contracts
  WHERE
    `Contract Start Date` IS NOT NULL AND `Contract Expiry Date` IS NOT NULL
),
ActiveConnections AS (
  -- Identify active connections for each month
  SELECT
    DATE_TRUNC(`Contract Start Date`, MONTH) AS Active_Month,
    COUNT(DISTINCT CONCAT(`Buyer BPID`, '-', `Contract Series Code`)) AS Active_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Active_Month
),
ExpiredConnections AS (
  -- Identify expired connections for the month after they expire
  SELECT
    DATE_TRUNC(DATE_ADD(`Contract Expiry Date`, INTERVAL 1 MONTH), MONTH) AS Expired_Month,
    COUNT(DISTINCT CONCAT(`Buyer BPID`, '-', `Contract Series Code`)) AS Expired_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Expired_Month
),
MonthlySummary AS (
  -- Combine active and expired counts by month
  SELECT
    m.Month_Start AS Date,
    COALESCE(a.Active_Count, 0) AS Active,
    COALESCE(e.Expired_Count, 0) AS Expired
  FROM
    Months m
    LEFT JOIN ActiveConnections a ON m.Month_Start = a.Active_Month
    LEFT JOIN ExpiredConnections e ON m.Month_Start = e.Expired_Month
),
CumulativeActive AS (
  -- Calculate cumulative active connections
  SELECT
    Date,
    SUM(Active) OVER (ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Cumulative_Active
  FROM
    MonthlySummary
),
CumulativeExpired AS (
  -- Calculate cumulative expired connections
  SELECT
    Date,
    SUM(Expired) OVER (ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Cumulative_Expired
  FROM
    MonthlySummary
),
FinalSummary AS (
  -- Combine cumulative active and expired values
  SELECT
    m.Date,
    m.Active,
    m.Expired,
    ca.Cumulative_Active - COALESCE(ce.Cumulative_Expired, 0) AS Total_Active_Data_Connections
  FROM
    MonthlySummary m
  LEFT JOIN CumulativeActive ca ON m.Date = ca.Date
  LEFT JOIN CumulativeExpired ce ON m.Date = ce.Date
)
-- Final output
SELECT
  FORMAT_DATE('%b-%Y', Date) AS Month,
  Active,
  Expired,
  Total_Active_Data_Connections
FROM
  FinalSummary
WHERE
  Date BETWEEN DATE('2023-01-01') AND CURRENT_DATE()
ORDER BY
  Date;


-----
Works to get numbers by type

WITH DeduplicatedContracts AS (
  SELECT
    c.`Buyer BPID`,
    c.`Contract Series Code`,
    c.`Contract Start Date`,
    c.`Contract Expiry Date`,
    o.org_category_name,
    ROW_NUMBER() OVER (
      PARTITION BY c.`Buyer BPID`, c.`Contract Series Code`
      ORDER BY c.`Contract Start Date` ASC
    ) AS RowNum
  FROM
    rdmga4.RDMreports.contracts c
    LEFT JOIN rdmga4.RDMreports.org_type_file o
    ON CAST(c.`Buyer BPID` AS STRING) = CAST(o.organization_bpid AS STRING)
  WHERE
    c.`Contract Start Date` IS NOT NULL 
    AND c.`Contract Expiry Date` IS NOT NULL
),
NetConnections AS (
  SELECT
    org_category_name,
    COUNT(DISTINCT CASE WHEN RowNum = 1 THEN CONCAT(`Buyer BPID`, '-', `Contract Series Code`) END) AS Total_New_Contracts,
    COUNT(DISTINCT CASE WHEN RowNum = 1 AND `Contract Expiry Date` <= CURRENT_DATE() THEN CONCAT(`Buyer BPID`, '-', `Contract Series Code`) END) AS Total_Expired_Contracts
  FROM
    DeduplicatedContracts
  WHERE
    org_category_name IS NOT NULL
  GROUP BY
    org_category_name
),
FinalSummary AS (
  SELECT
    org_category_name,
    Total_New_Contracts - Total_Expired_Contracts AS Total_Active_Connections
  FROM
    NetConnections
)
SELECT
  org_category_name,
  Total_Active_Connections
FROM
  FinalSummary
ORDER BY
  org_category_name;


---------------------------

Full query

-- 1) Distinct categories
WITH Categories AS (
  SELECT DISTINCT 
    org_category_name
  FROM 
    rdmga4.RDMreports.org_type_file
  WHERE
    org_category_name IS NOT NULL
),

-- 2) Generate all months from 2023-01-01 up to today
Months AS (
  SELECT 
    DATE_TRUNC(
      DATE_ADD(DATE('2023-01-01'), INTERVAL n MONTH),
      MONTH
    ) AS Month_Start
  FROM UNNEST(
    GENERATE_ARRAY(
      0,
      DATE_DIFF(CURRENT_DATE(), DATE('2023-01-01'), MONTH)
    )
  ) AS n
),

-- 3) Create all (month, category) pairs
AllMonthCategories AS (
  SELECT
    m.Month_Start AS Date,
    c.org_category_name
  FROM
    Months m
    CROSS JOIN Categories c
),

-- 4) Deduplicate contracts
DeduplicatedContracts AS (
  SELECT
    c.`Buyer BPID`,
    c.`Contract Series Code`,
    c.`Contract Start Date`,
    c.`Contract Expiry Date`,
    o.org_category_name,
    ROW_NUMBER() OVER (
      PARTITION BY c.`Buyer BPID`, c.`Contract Series Code`
      ORDER BY c.`Contract Start Date` ASC
    ) AS RowNum
  FROM
    rdmga4.RDMreports.contracts AS c
  LEFT JOIN
    rdmga4.RDMreports.org_type_file AS o
    ON CAST(c.`Buyer BPID` AS STRING) = CAST(o.organization_bpid AS STRING)
  WHERE
    c.`Contract Start Date` IS NOT NULL
    AND c.`Contract Expiry Date` IS NOT NULL
),

-- 5) Identify active connections per (month, category)
ActiveConnections AS (
  SELECT
    DATE_TRUNC(`Contract Start Date`, MONTH) AS Active_Month,
    org_category_name,
    COUNT(
      DISTINCT CONCAT(`Buyer BPID`, '-', `Contract Series Code`)
    ) AS Active_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Active_Month,
    org_category_name
),

-- 6) Identify expired connections per (month, category)
ExpiredConnections AS (
  SELECT
    DATE_TRUNC(DATE_ADD(`Contract Expiry Date`, INTERVAL 1 MONTH), MONTH) AS Expired_Month,
    org_category_name,
    COUNT(
      DISTINCT CONCAT(`Buyer BPID`, '-', `Contract Series Code`)
    ) AS Expired_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Expired_Month,
    org_category_name
),

-- 7) Merge active and expired counts into a single monthly summary (for each category)
MonthlySummary AS (
  SELECT
    amc.Date,
    amc.org_category_name,
    COALESCE(ac.Active_Count, 0) AS Active_in_month,
    COALESCE(ec.Expired_Count, 0) AS Expired_in_month
  FROM
    AllMonthCategories AS amc
    LEFT JOIN ActiveConnections ac
      ON amc.Date = ac.Active_Month
      AND amc.org_category_name = ac.org_category_name
    LEFT JOIN ExpiredConnections ec
      ON amc.Date = ec.Expired_Month
      AND amc.org_category_name = ec.org_category_name
),

-- 8) Compute the cumulative net active connections by category
CumulativeSummary AS (
  SELECT
    Date,
    org_category_name,
    SUM(Active_in_month) 
      OVER (
        PARTITION BY org_category_name 
        ORDER BY Date 
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      )
    - 
    SUM(Expired_in_month) 
      OVER (
        PARTITION BY org_category_name 
        ORDER BY Date 
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS Total_Active_Data_Connections,
    Active_in_month,
    Expired_in_month
  FROM
    MonthlySummary
),

-- 9) Add a "Total" row by summing across all categories per month
FinalSummary AS (
  SELECT
    Date,
    org_category_name,
    Active_in_month,
    Expired_in_month,
    Total_Active_Data_Connections
  FROM
    CumulativeSummary
  
  UNION ALL
  
  SELECT
    Date,
    "Total" AS org_category_name,
    SUM(Active_in_month) AS Active_in_month,
    SUM(Expired_in_month) AS Expired_in_month,
    SUM(Total_Active_Data_Connections) AS Total_Active_Data_Connections
  FROM
    CumulativeSummary
  GROUP BY
    Date
)

-- 10) Final Select and output
SELECT
  FORMAT_DATE('%b-%Y', Date) AS Month,
  org_category_name,
  Active_in_month AS Active,
  Expired_in_month AS Expired,
  Total_Active_Data_Connections
FROM
  FinalSummary
WHERE
  Date BETWEEN DATE('2023-01-01') AND CURRENT_DATE()
ORDER BY
  Date,
  -- This pushes the 'Total' category row below the other categories
  CASE WHEN org_category_name = 'Total' THEN 1 ELSE 0 END,
  org_category_name;


---------------------------------------------

date type

-- 1) Distinct categories
WITH Categories AS (
  SELECT DISTINCT 
    org_category_name
  FROM 
    rdmga4.RDMreports.org_type_file
  WHERE
    org_category_name IS NOT NULL
),

-- 2) Generate all months from 2023-01-01 up to today
Months AS (
  SELECT 
    DATE(
      DATE_TRUNC(
        DATE_ADD(DATE('2023-01-01'), INTERVAL n MONTH),
        MONTH
      )
    ) AS Month_Start
  FROM UNNEST(
    GENERATE_ARRAY(
      0,
      DATE_DIFF(CURRENT_DATE(), DATE('2023-01-01'), MONTH)
    )
  ) AS n
),

-- 3) Create all (month, category) pairs
AllMonthCategories AS (
  SELECT
    DATE(m.Month_Start) AS Date,  -- Explicitly ensure Date is of type DATE
    c.org_category_name
  FROM
    Months m
    CROSS JOIN Categories c
),

-- 4) Deduplicate contracts
DeduplicatedContracts AS (
  SELECT
    c.`Buyer BPID`,
    c.`Contract Series Code`,
    DATE(c.`Contract Start Date`) AS `Contract Start Date`,  -- Ensure dates are cast as DATE
    DATE(c.`Contract Expiry Date`) AS `Contract Expiry Date`, -- Ensure dates are cast as DATE
    o.org_category_name,
    ROW_NUMBER() OVER (
      PARTITION BY c.`Buyer BPID`, c.`Contract Series Code`
      ORDER BY c.`Contract Start Date` ASC
    ) AS RowNum
  FROM
    rdmga4.RDMreports.contracts AS c
  LEFT JOIN
    rdmga4.RDMreports.org_type_file AS o
    ON CAST(c.`Buyer BPID` AS STRING) = CAST(o.organization_bpid AS STRING)
  WHERE
    c.`Contract Start Date` IS NOT NULL
    AND c.`Contract Expiry Date` IS NOT NULL
),

-- 5) Identify active connections per (month, category)
ActiveConnections AS (
  SELECT
    DATE(
      DATE_TRUNC(`Contract Start Date`, MONTH)
    ) AS Active_Month,
    org_category_name,
    COUNT(
      DISTINCT CONCAT(`Buyer BPID`, '-', `Contract Series Code`)
    ) AS Active_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Active_Month,
    org_category_name
),

-- 6) Identify expired connections per (month, category)
ExpiredConnections AS (
  SELECT
    DATE(
      DATE_TRUNC(DATE_ADD(`Contract Expiry Date`, INTERVAL 1 MONTH), MONTH)
    ) AS Expired_Month,
    org_category_name,
    COUNT(
      DISTINCT CONCAT(`Buyer BPID`, '-', `Contract Series Code`)
    ) AS Expired_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Expired_Month,
    org_category_name
),

-- 7) Merge active and expired counts into a single monthly summary (for each category)
MonthlySummary AS (
  SELECT
    DATE(amc.Date) AS Date, -- Ensure Date is explicitly of type DATE
    amc.org_category_name,
    COALESCE(ac.Active_Count, 0) AS Active_in_month,
    COALESCE(ec.Expired_Count, 0) AS Expired_in_month
  FROM
    AllMonthCategories AS amc
    LEFT JOIN ActiveConnections ac
      ON amc.Date = ac.Active_Month
      AND amc.org_category_name = ac.org_category_name
    LEFT JOIN ExpiredConnections ec
      ON amc.Date = ec.Expired_Month
      AND amc.org_category_name = ec.org_category_name
),

-- 8) Compute the cumulative net active connections by category
CumulativeSummary AS (
  SELECT
    Date,
    org_category_name,
    SUM(Active_in_month) 
      OVER (
        PARTITION BY org_category_name 
        ORDER BY Date 
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      )
    - 
    SUM(Expired_in_month) 
      OVER (
        PARTITION BY org_category_name 
        ORDER BY Date 
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS Total_Active_Data_Connections,
    Active_in_month,
    Expired_in_month
  FROM
    MonthlySummary
),

-- 9) Add a "Total" row by summing across all categories per month
FinalSummary AS (
  SELECT
    Date,
    org_category_name,
    Active_in_month,
    Expired_in_month,
    Total_Active_Data_Connections
  FROM
    CumulativeSummary
  
  UNION ALL
  
  SELECT
    Date,
    "Total" AS org_category_name,
    SUM(Active_in_month) AS Active_in_month,
    SUM(Expired_in_month) AS Expired_in_month,
    SUM(Total_Active_Data_Connections) AS Total_Active_Data_Connections
  FROM
    CumulativeSummary
  GROUP BY
    Date
)

-- 10) Final Select and output
SELECT
  Date,  -- Date is now explicitly a DATE type
  org_category_name,
  Active_in_month AS Active,
  Expired_in_month AS Expired,
  Total_Active_Data_Connections
FROM
  FinalSummary
WHERE
  Date BETWEEN DATE('2023-01-01') AND CURRENT_DATE()
ORDER BY
  Date,
  -- This pushes the 'Total' category row below the other categories
  CASE WHEN org_category_name = 'Total' THEN 1 ELSE 0 END,
  org_category_name;



---------------------------------------



-- Step 1: Get distinct organization categories
WITH Categories AS (
  SELECT DISTINCT 
    org_category_name AS dac_org_category_name -- Unique organization category names
  FROM 
    rdmga4.RDMreports.org_type_file -- Source table for organization types
  WHERE
    org_category_name IS NOT NULL -- Exclude rows with NULL category names
),

-- Step 2: Generate all months from January 2023 to the current month
Months AS (
  SELECT 
    DATE(
      DATE_TRUNC(
        DATE_ADD(DATE('2023-01-01'), INTERVAL n MONTH), -- Add months incrementally to the start date
        MONTH -- Truncate to the first day of the month
      )
    ) AS dac_Month_Start -- Generated monthly date
  FROM UNNEST(
    GENERATE_ARRAY(
      0, -- Start from 0 months
      DATE_DIFF(CURRENT_DATE(), DATE('2023-01-01'), MONTH) -- Calculate the total number of months from start date to today
    )
  ) AS n
),

-- Step 3: Create all combinations of (month, category)
AllMonthCategories AS (
  SELECT
    DATE(m.dac_Month_Start) AS dac_Date, -- Explicitly ensure the date is of type DATE
    c.dac_org_category_name -- Category name
  FROM
    Months m
    CROSS JOIN Categories c -- Generate all combinations of months and categories
),

-- Step 4: Deduplicate contracts to remove multiple versions for the same buyer and product
DeduplicatedContracts AS (
  SELECT
    CAST(c.`Buyer BPID` AS STRING) AS dac_Buyer_BPID, -- Unique identifier for the buyer
    c.`Contract Series Code` AS dac_Contract_Series_Code, -- Unique identifier for the contract
    DATE(c.`Contract Start Date`) AS dac_Contract_Start_Date, -- Start date of the contract
    DATE(c.`Contract Expiry Date`) AS dac_Contract_End_Date, -- Expiry date of the contract
    o.org_category_name AS dac_org_category_name, -- Organization category name from the linked table
    ROW_NUMBER() OVER (
      PARTITION BY c.`Buyer BPID`, c.`Contract Series Code` -- Group contracts by buyer and product
      ORDER BY c.`Contract Start Date` ASC -- Keep the earliest start date
    ) AS dac_RowNum -- Rank contracts within each group for deduplication
  FROM
    rdmga4.RDMreports.contracts AS c -- Source table for contracts
  LEFT JOIN
    rdmga4.RDMreports.org_type_file AS o -- Link with organization category details
    ON CAST(c.`Buyer BPID` AS STRING) = CAST(o.organization_bpid AS STRING) -- Match buyer BPID with organization BPID
  WHERE
    c.`Contract Start Date` IS NOT NULL -- Exclude contracts with missing start dates
    AND c.`Contract Expiry Date` IS NOT NULL -- Exclude contracts with missing expiry dates
),

-- Step 5: Calculate active connections for each (month, category)
ActiveConnections AS (
  SELECT
    DATE(
      DATE_TRUNC(dac_Contract_Start_Date, MONTH) -- Truncate the contract start date to the first day of the month
    ) AS dac_Active_Month,
    dac_org_category_name, -- Organization category name
    COUNT(
      DISTINCT CONCAT(dac_Buyer_BPID, '-', dac_Contract_Series_Code) -- Unique connection identifier (buyer + contract)
    ) AS dac_Active_Count -- Count of active connections
  FROM
    DeduplicatedContracts
  WHERE
    dac_RowNum = 1 -- Only include the first (deduplicated) contract for each buyer-product combination
  GROUP BY
    dac_Active_Month,
    dac_org_category_name
),

-- Step 6: Calculate expired connections for each (month, category)
ExpiredConnections AS (
  SELECT
    DATE(
      DATE_TRUNC(DATE_ADD(dac_Contract_End_Date, INTERVAL 1 MONTH), MONTH) -- Move to the next month after expiry and truncate
    ) AS dac_Expired_Month,
    dac_org_category_name, -- Organization category name
    COUNT(
      DISTINCT CONCAT(dac_Buyer_BPID, '-', dac_Contract_Series_Code) -- Unique connection identifier (buyer + contract)
    ) AS dac_Expired_Count -- Count of expired connections
  FROM
    DeduplicatedContracts
  WHERE
    dac_RowNum = 1 -- Only include the first (deduplicated) contract for each buyer-product combination
  GROUP BY
    dac_Expired_Month,
    dac_org_category_name
),

-- Step 7: Merge active and expired counts into a single monthly summary for each category
MonthlySummary AS (
  SELECT
    amc.dac_Date AS dac_Date, -- Month of activity
    amc.dac_org_category_name, -- Organization category name
    COALESCE(ac.dac_Active_Count, 0) AS dac_Active_in_month, -- Active connections count (default to 0 if none)
    COALESCE(ec.dac_Expired_Count, 0) AS dac_Expired_in_month -- Expired connections count (default to 0 if none)
  FROM
    AllMonthCategories AS amc
    LEFT JOIN ActiveConnections ac
      ON amc.dac_Date = ac.dac_Active_Month -- Match by month
      AND amc.dac_org_category_name = ac.dac_org_category_name -- Match by category
    LEFT JOIN ExpiredConnections ec
      ON amc.dac_Date = ec.dac_Expired_Month -- Match by month
      AND amc.dac_org_category_name = ec.dac_org_category_name -- Match by category
),

-- Step 8: Calculate cumulative net active connections by category
CumulativeSummary AS (
  SELECT
    dac_Date, -- Month of activity
    dac_org_category_name, -- Organization category name
    SUM(dac_Active_in_month) 
      OVER (
        PARTITION BY dac_org_category_name -- For each category
        ORDER BY dac_Date -- Order by month
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW -- Include all rows up to the current one
      )
    - 
    SUM(dac_Expired_in_month) 
      OVER (
        PARTITION BY dac_org_category_name
        ORDER BY dac_Date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
      ) AS dac_Total_Active_Data_Connections, -- Cumulative net active connections
    dac_Active_in_month, -- Active connections in the current month
    dac_Expired_in_month -- Expired connections in the current month
  FROM
    MonthlySummary
),

-- Step 9: Add a "Total" row to summarize across all categories per month
FinalSummary AS (
  SELECT
    dac_Date,
    dac_org_category_name,
    dac_Active_in_month,
    dac_Expired_in_month,
    dac_Total_Active_Data_Connections
  FROM
    CumulativeSummary
  
  UNION ALL
  
  SELECT
    dac_Date,
    "Total" AS dac_org_category_name, -- Label for total row
    SUM(dac_Active_in_month) AS dac_Active_in_month, -- Total active connections
    SUM(dac_Expired_in_month) AS dac_Expired_in_month, -- Total expired connections
    SUM(dac_Total_Active_Data_Connections) AS dac_Total_Active_Data_Connections -- Total cumulative connections
  FROM
    CumulativeSummary
  GROUP BY
    dac_Date
)

-- Step 10: Final output with ordering
SELECT
  dac_Date, -- Date of activity
  dac_org_category_name, -- Organization category name
  dac_Active_in_month AS dac_Active, -- Active connections in the current month
  dac_Expired_in_month AS dac_Expired, -- Expired connections in the current month
  dac_Total_Active_Data_Connections -- Cumulative net active connections
FROM
  FinalSummary
WHERE
  dac_Date BETWEEN DATE('2023-01-01') AND CURRENT_DATE() -- Limit results to valid dates
ORDER BY
  dac_Date, -- Order by date
  CASE WHEN dac_org_category_name = 'Total' THEN 1 ELSE 0 END, -- Push "Total" rows to the bottom
  dac_org_category_name; -- Further order by category name



---------------------------- Fully working 

WITH Months AS (
  SELECT 
    DATE_TRUNC(DATE_ADD(DATE('2023-01-01'), INTERVAL n MONTH), MONTH) AS Month_Start
  FROM 
    UNNEST(GENERATE_ARRAY(0, DATE_DIFF(CURRENT_DATE(), DATE('2023-01-01'), MONTH))) AS n
),

ProductPublishedDates AS (
  SELECT
    `Data Product Code`,
    `Product Series Code`,
    MIN(DATE(`Published Date`)) AS Published_Date
  FROM 
    `rdmga4.RDMreports.raw_data_product_details`
  WHERE 
    `Published Date` IS NOT NULL
  GROUP BY 
    `Data Product Code`, `Product Series Code`
),

DeduplicatedContracts AS (
  SELECT
    c.`Buyer BPID`,
    c.`Data Product Code`,
    c.`Product Series Code`,
    c.`Contract Start Date`,
    c.`Contract Expiry Date`,
    GREATEST(c.`Contract Start Date`, COALESCE(p.Published_Date, c.`Contract Start Date`)) AS Effective_Start_Date,
    ro.`Organization category` AS Org_Category,
    ROW_NUMBER() OVER (
      PARTITION BY c.`Buyer BPID`, c.`Product Series Code`
      ORDER BY c.`Contract Start Date` ASC
    ) AS RowNum
  FROM
    rdmga4.RDMreports.contracts c
  LEFT JOIN ProductPublishedDates p 
    ON c.`Product Series Code` = p.`Product Series Code`
    AND c.`Data Product Code` = p.`Data Product Code`
  LEFT JOIN rdmga4.RDMreports.raw_organization_overview ro
    ON CAST(c.`Buyer BPID` AS STRING) = CAST(ro.`BPID` AS STRING)
  WHERE
    c.`Contract Start Date` IS NOT NULL
    AND c.`Contract Expiry Date` IS NOT NULL
    AND ro.`Organization category` IS NOT NULL
),

ActiveConnections AS (
  SELECT
    DATE_TRUNC(Effective_Start_Date, MONTH) AS Active_Month,
    Org_Category,
    COUNT(DISTINCT CONCAT(`Buyer BPID`, '-', `Product Series Code`)) AS Active_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Active_Month, Org_Category
),

ExpiredConnections AS (
  SELECT
    DATE_TRUNC(DATE_ADD(`Contract Expiry Date`, INTERVAL 1 MONTH), MONTH) AS Expired_Month,
    Org_Category,
    COUNT(DISTINCT CONCAT(`Buyer BPID`, '-', `Product Series Code`)) AS Expired_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Expired_Month, Org_Category
),

AllMonthCategories AS (
  SELECT
    m.Month_Start AS Date,
    c.Org_Category
  FROM
    Months m
  CROSS JOIN (
    SELECT DISTINCT Org_Category FROM DeduplicatedContracts
  ) c
),

MonthlySummary AS (
  SELECT
    amc.Date,
    amc.Org_Category,
    COALESCE(a.Active_Count, 0) AS Active,
    COALESCE(e.Expired_Count, 0) AS Expired
  FROM
    AllMonthCategories amc
  LEFT JOIN ActiveConnections a 
    ON amc.Date = a.Active_Month AND amc.Org_Category = a.Org_Category
  LEFT JOIN ExpiredConnections e 
    ON amc.Date = e.Expired_Month AND amc.Org_Category = e.Org_Category
),

CumulativeSummary AS (
  SELECT
    Date,
    Org_Category,
    SUM(Active) OVER (PARTITION BY Org_Category ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) -
    SUM(Expired) OVER (PARTITION BY Org_Category ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_Active_Data_Connections,
    Active,
    Expired
  FROM
    MonthlySummary
),

FinalSummary AS (
  SELECT
    Date,
    Org_Category,
    Active,
    Expired,
    Total_Active_Data_Connections
  FROM
    CumulativeSummary

  UNION ALL

  SELECT
    Date,
    'Total' AS Org_Category,
    SUM(Active),
    SUM(Expired),
    SUM(Total_Active_Data_Connections)
  FROM
    CumulativeSummary
  GROUP BY Date
)

-- Final output
SELECT
  FORMAT_DATE('%b-%Y', Date) AS Month,
  Org_Category,
  Active,
  Expired,
  Total_Active_Data_Connections
FROM
  FinalSummary
WHERE
  Date BETWEEN DATE('2023-01-01') AND CURRENT_DATE()
ORDER BY
  Date,
  CASE WHEN Org_Category = 'Total' THEN 1 ELSE 0 END,
  Org_Category;



------------------------------ view

CREATE OR REPLACE VIEW `rdmga4.RDMreports.derived_active_contracts_view` AS

WITH Months AS (
  SELECT 
    DATE_TRUNC(DATE_ADD(DATE('2023-01-01'), INTERVAL n MONTH), MONTH) AS Month_Start
  FROM 
    UNNEST(GENERATE_ARRAY(0, DATE_DIFF(CURRENT_DATE(), DATE('2023-01-01'), MONTH))) AS n
),

ProductPublishedDates AS (
  SELECT
    `Data Product Code`,
    `Product Series Code`,
    MIN(DATE(`Published Date`)) AS Published_Date
  FROM 
    `rdmga4.RDMreports.raw_data_product_details`
  WHERE 
    `Published Date` IS NOT NULL
  GROUP BY 
    `Data Product Code`, `Product Series Code`
),

DeduplicatedContracts AS (
  SELECT
    c.`Buyer BPID`,
    c.`Data Product Code`,
    c.`Product Series Code`,
    c.`Contract Start Date`,
    c.`Contract Expiry Date`,
    GREATEST(c.`Contract Start Date`, COALESCE(p.Published_Date, c.`Contract Start Date`)) AS Effective_Start_Date,
    ro.`Organization category` AS Org_Category,
    ROW_NUMBER() OVER (
      PARTITION BY c.`Buyer BPID`, c.`Product Series Code`
      ORDER BY c.`Contract Start Date` ASC
    ) AS RowNum
  FROM
    `rdmga4.RDMreports.contracts` c
  LEFT JOIN ProductPublishedDates p 
    ON c.`Product Series Code` = p.`Product Series Code`
    AND c.`Data Product Code` = p.`Data Product Code`
  LEFT JOIN `rdmga4.RDMreports.raw_organization_overview` ro
    ON CAST(c.`Buyer BPID` AS STRING) = CAST(ro.`BPID` AS STRING)
  WHERE
    c.`Contract Start Date` IS NOT NULL
    AND c.`Contract Expiry Date` IS NOT NULL
    AND ro.`Organization category` IS NOT NULL
),

ActiveConnections AS (
  SELECT
    DATE_TRUNC(Effective_Start_Date, MONTH) AS Active_Month,
    Org_Category,
    COUNT(DISTINCT CONCAT(`Buyer BPID`, '-', `Product Series Code`)) AS Active_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Active_Month, Org_Category
),

ExpiredConnections AS (
  SELECT
    DATE_TRUNC(DATE_ADD(`Contract Expiry Date`, INTERVAL 1 MONTH), MONTH) AS Expired_Month,
    Org_Category,
    COUNT(DISTINCT CONCAT(`Buyer BPID`, '-', `Product Series Code`)) AS Expired_Count
  FROM
    DeduplicatedContracts
  WHERE
    RowNum = 1
  GROUP BY
    Expired_Month, Org_Category
),

AllMonthCategories AS (
  SELECT
    m.Month_Start AS Date,
    c.Org_Category
  FROM
    Months m
  CROSS JOIN (
    SELECT DISTINCT Org_Category FROM DeduplicatedContracts
  ) c
),

MonthlySummary AS (
  SELECT
    amc.Date,
    amc.Org_Category,
    COALESCE(a.Active_Count, 0) AS Active,
    COALESCE(e.Expired_Count, 0) AS Expired
  FROM
    AllMonthCategories amc
  LEFT JOIN ActiveConnections a 
    ON amc.Date = a.Active_Month AND amc.Org_Category = a.Org_Category
  LEFT JOIN ExpiredConnections e 
    ON amc.Date = e.Expired_Month AND amc.Org_Category = e.Org_Category
),

CumulativeSummary AS (
  SELECT
    Date,
    Org_Category,
    SUM(Active) OVER (PARTITION BY Org_Category ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) -
    SUM(Expired) OVER (PARTITION BY Org_Category ORDER BY Date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_Active_Data_Connections,
    Active,
    Expired
  FROM
    MonthlySummary
),

FinalSummary AS (
  SELECT
    Date,
    Org_Category,
    Active,
    Expired,
    Total_Active_Data_Connections
  FROM
    CumulativeSummary

  UNION ALL

  SELECT
    Date,
    'Total' AS Org_Category,
    SUM(Active),
    SUM(Expired),
    SUM(Total_Active_Data_Connections)
  FROM
    CumulativeSummary
  GROUP BY Date
)

-- Final output
SELECT
  FORMAT_DATE('%b-%Y', Date) AS Month,
  Org_Category,
  Active,
  Expired,
  Total_Active_Data_Connections
FROM
  FinalSummary
WHERE
  Date BETWEEN DATE('2023-01-01') AND CURRENT_DATE()
ORDER BY
  Date,
  CASE WHEN Org_Category = 'Total' THEN 1 ELSE 0 END,
  Org_Category;
